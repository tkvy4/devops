---
- name: Install Jira
  hosts: all
  tasks:

  - name: Load variables
    include_vars:
      file: jira.yml
    tags: variables

  - name: Check if archive already exists
    stat:
      path: "/atlassian/tmp/atlassian-jira-software-{{ jira_version }}.tar.gz"
    register: archive_file

  - name: Download Jira archive if doesn't exist
    command: wget warn=False -P /atlassian/tmp https://www.atlassian.com/software/jira/downloads/binary/atlassian-jira-software-{{ jira_version }}.tar.gz
    when: not archive_file.stat.exists

  - name: Create Jira user
    user:
      name: jira
      state: present

  - name: Create /atlassian/jira/data
    file:
      path: /atlassian/jira/data
      state: directory
      force: no

  - name: Create /atlassian/jira/application
    file:
      path: /atlassian/jira/application
      state: directory
      force: no

  - name: Untar archive
    command: tar -xzvf /atlassian/tmp/atlassian-jira-software-{{ jira_version }}.tar.gz -C /atlassian/jira/application/

  - name: Set jira-home
    lineinfile:
      path: /atlassian/jira/application/atlassian-jira-software-{{ jira_version }}-standalone/atlassian-jira/WEB-INF/classes/jira-application.properties
      regexp: 'jira.home =$'
      line: 'jira.home = /atlassian/jira/data'

  - name: Set ProxyName in server.xml
    lineinfile:
      path: /atlassian/jira/application/atlassian-jira-software-{{ jira_version }}-standalone/conf/server.xml
      insertafter: '.*redirectPort="8443".*'
      line: '                   scheme="https" secure="true" proxyName="{{ domain_name }}" proxyPort="443"'
      # 19 blank spaces

  # Pas necessaire dans un use case 'normal', Jira devrait toujours utiliser le port 8080
  - name: Update connector port in server.xml
    replace:
      path: /atlassian/jira/application/atlassian-jira-software-{{ jira_version }}-standalone/conf/server.xml
      regexp: 'port="8080"'
      replace: 'port="{{ port }}"'

  - name: Set JVM_MIN in setenv.sh
    lineinfile:
      path: /atlassian/jira/application/atlassian-jira-software-{{ jira_version }}-standalone/bin/setenv.sh
      regexp: '^JVM_MINIMUM_MEMORY='
      line: 'JVM_MINIMUM_MEMORY="{{ jvm_minimum_memory }}"'

  - name: Set JVM_MAX in setenv.sh
    lineinfile:
      path: /atlassian/jira/application/atlassian-jira-software-{{ jira_version }}-standalone/bin/setenv.sh
      regexp: '^JVM_MAXIMUM_MEMORY='
      line: 'JVM_MAXIMUM_MEMORY="{{ jvm_maximum_memory }}"'

  - name: Create current symlink
  #  file:
  #    src: /atlassian/jira/application/atlassian-jira-software-{{ jira_version }}-standalone
  #    dest: /atlassian/jira/application/current
  #    state: link
    command: sudo -u jira ln -s /atlassian/jira/application/atlassian-jira-software-{{ jira_version }}-standalone /atlassian/jira/application/current
    become: yes
    become_user: root
    docker_container:
      name: {{ my_host }}

- name: Create Jira service
  hosts: localhost
  tasks:

  - name: Load variables
    include_vars:
      file: jira.yml
    tags: variables

  - name: Get Jira service file
    command: docker cp /home/kevin/git/devops/jira.service {{ my_host }}:/etc/init.d/jira

  - name: Change ownership
    command: docker exec {{ my_host }} chown root:root /etc/init.d/jira

  - name: Make it executable
    command: docker exec {{ my_host }} chmod +x /etc/init.d/jira

- name: Create jiradb
  hosts: localhost
  tasks:

  - name: Create database
    postgresql_db:
      name: jiradb
      encoding: UNICODE
      lc_collate: en_US.UTF-8
      lc_ctype: en_US.UTF-8
      template: template0
    become: yes
    become_user: postgres

  - name: Create jiradbuser
    postgresql_user:
      name: jiradbuser
      password: 'eecai1ephahya3eimielieph1OohoHie'
      login_password: yes
    become: yes
    become_user: postgres

  - name: Grant permissions
    postgresql_privs:
      name: jiradb
      role: jiradbuser
      priv: ALL
      state: present
    become: yes
    become_user: postgres
