---
- name: Install Jira
  hosts: all
  vars:
    ansible_python_interpreter: /usr/bin/python3
  tasks:

  - name: Load variables
    include_vars:
      file: jira.yml
    tags: variables

  - name: Check if archive already exists
    stat:
      path: "/atlassian/tmp/atlassian-jira-software-{{ jira_version }}.tar.gz"
    register: archive_file

  - name: Download Jira archive if doesn't exist
    command: wget warn=False -P /atlassian/tmp https://www.atlassian.com/software/jira/downloads/binary/atlassian-jira-software-{{ jira_version }}.tar.gz
    when: not archive_file.stat.exists
    no_log: true

  - name: Create Jira user
    user:
      name: jira
      state: present

  - name: Create /atlassian/jira/data
    file:
      path: /atlassian/jira/data
      state: directory
      force: no

  - name: Create /atlassian/jira/application
    file:
      path: /atlassian/jira/application
      state: directory
      force: no

  - name: Untar archive
    command: tar -xzvf /atlassian/tmp/atlassian-jira-software-{{ jira_version }}.tar.gz -C /atlassian/jira/application/
    no_log: true 

  - name: Set jira-home
    lineinfile:
      path: /atlassian/jira/application/atlassian-jira-software-{{ jira_version }}-standalone/atlassian-jira/WEB-INF/classes/jira-application.properties
      regexp: 'jira.home =$'
      line: 'jira.home = /atlassian/jira/data'

  - name: Set ProxyName in server.xml
    lineinfile:
      path: /atlassian/jira/application/atlassian-jira-software-{{ jira_version }}-standalone/conf/server.xml
      insertafter: '.*redirectPort="8443".*'
      line: '                   scheme="https" secure="true" proxyName="{{ domain_name }}" proxyPort="443"'
      # 19 blank spaces

  # Pas necessaire dans un use case 'normal', Jira devrait toujours utiliser le port 8080
  - name: Update connector port in server.xml
    replace:
      path: /atlassian/jira/application/atlassian-jira-software-{{ jira_version }}-standalone/conf/server.xml
      regexp: 'port="8080"'
      replace: 'port="{{ port }}"'

  - name: Set JVM_MIN in setenv.sh
    lineinfile:
      path: /atlassian/jira/application/atlassian-jira-software-{{ jira_version }}-standalone/bin/setenv.sh
      regexp: '^JVM_MINIMUM_MEMORY='
      line: 'JVM_MINIMUM_MEMORY="{{ jvm_minimum_memory }}"'

  - name: Set JVM_MAX in setenv.sh
    lineinfile:
      path: /atlassian/jira/application/atlassian-jira-software-{{ jira_version }}-standalone/bin/setenv.sh
      regexp: '^JVM_MAXIMUM_MEMORY='
      line: 'JVM_MAXIMUM_MEMORY="{{ jvm_maximum_memory }}"'

  - name: Update ownershop of /atlassian/jira/application/atlassian-jira-software-{{ jira_version }}-standalone
    command: sudo chown -R jira:jira /atlassian/jira/application/atlassian-jira-software-{{ jira_version }}-standalone

  - name: Créer le lien symbolique vers un dossier cible
    file:
      src: /atlassian/jira/application/atlassian-jira-software-{{ jira_version }}-standalone
      dest: /atlassian/jira/application/current
      state: link
    
- name: Create Jira service
  hosts: localhost
  tasks:

  - name: Load variables
    include_vars:
      file: jira.yml
    tags: variables

  - name: Get Jira service file
    command: docker cp /home/kevin/git/devops/jira.service {{ my_host }}:/etc/init.d/jira

  - name: Change ownership
    command: docker exec {{ my_host }} chown root:root /etc/init.d/jira

  - name: Make it executable
    command: docker exec {{ my_host }} chmod +x /etc/init.d/jira

- name: Create jiradb
  hosts: all
  tasks:

    - name: Vérifier si le répertoire existe
      stat:
        path: /atlassian/database/data
      register: database_stat

    - name: Create /atlassian/database/data
      command: mkdir -p /atlassian/database/data/
      when: not database_stat.stat.exists

    - name: Copy PostgreSQL data directory within container
      command: sudo cp -r /var/lib/postgresql /atlassian/database/data

    - name: Update ownership of /atlassian/database
      command: sudo chown -R postgres:postgres /atlassian/database/

    - name: Update postgresql.conf
      ansible.builtin.lineinfile:
        path: /etc/postgresql/12/main/postgresql.conf
        regexp: '^data_directory = .*'
        line: "data_directory = '/atlassian/database/data/postgresql/12/main'"
      become: yes

     - name: Check pg_hba.conf
      shell: "grep -E 'host[[:space:]]+all[[:space:]]+postgres[[:space:]]+' /etc/postgresql/12/main/pg_hba.conf"
      register: pg_hba_exists
      changed_when: false
      ignore_errors: yes
      no_log: true

    - name: Display
      debug:
        msg: "Previous error is not fatal and can be ignored."
      when: pg_hba_exists.stdout == "" or pg_hba_exists.rc != 0

    - name: Ajouter la configuration à pg_hba.conf
      blockinfile:
        path: /etc/postgresql/12/main/pg_hba.conf
        marker: "# ANSIBLE: BEGIN postgres auth"
        insertafter: ".*# IPv4 local connections:"
        block: |
          host    all             postgres        127.0.0.1/32            trust
          host    all             postgres        ::1/128                 trust
      when: pg_hba_exists.rc != 0

    - name: Start PostgreSQL service
      service:
        name: postgresql
        enabled: yes
        state: restarted

    - name: Create new database
      postgresql_db:
        login_host: localhost
        login_user: postgres
        login_password:
        name: jiradb
        encoding: UNICODE
        lc_collate: C.UTF-8
        lc_ctype: C.UTF-8
        template: template0

    - name: Create jiradbuser
      postgresql_user:
        name: jiradbuser
        password: 'eecai1ephahya3eimielieph1OohoHie'
        login_password: yes
      become: yes
      become_user: postgres

    - name: Grant permissions
      postgresql_query:
        login_host: localhost
        login_user: postgres
        login_password: ""
        db: jiradb
        query: "grant all privileges on database jiradb to jiradbuser;"
      become: yes
      become_user: postgres
