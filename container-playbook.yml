---
- name: Récupérer les fichiers sur Git
  hosts: localhost
  tasks:
    - name: Vérifier si le répertoire existe
      stat:
        path: /home/kevin/git/devops
      register: directory_stat

    - name: Supprimer le répertoire s'il existe
      file:
        path: /home/kevin/git/devops
        state: absent
      when: directory_stat.stat.exists

    - name: Cloner le dépôt Git
      git:
        repo: git@github.com:tkvy4/devops.git
        dest: /home/kevin/git/devops/
        version: main
        force: yes

- name: Build et run le conteneur Docker
  hosts: localhost
  become: true

  tasks:
    - name: Charger les variables
      include_vars:
        file: jira.yml
      tags: variables

    - name: Vérifier si le répertoire existe
      stat:
        path: /home/kevin/docker_container/{{ my_host }}
      register: dir_status

    - name: Créer le répertoire s'il n'existe pas
      file:
        path: /home/kevin/docker_container/{{ my_host }}
        state: directory
      when: not dir_status.stat.exists

    - name: Copier le Dockerfile
      copy:
        src: /home/kevin/git/devops/Dockerfile
        dest: /home/kevin/docker_container/{{ my_host }}
        owner: jenkins
        group: jenkins
        mode: "0644"

    - name: Vérifier l'état du conteneur
      docker_container_info:
        name: "{{ my_host }}"
      register: container_info
      no_log: true

    - name: Stop container
      block:
        - name: Container is running
          docker_container:
            name: "{{ my_host }}"
            image: "{{ my_host }}"
            state: stopped
          when: container_info.container.State.Running == true
          no_log: true

        - name: Container stopped
          debug:
            msg: "Le conteneur a ete stoppe..."

        - name: Container is already stopped
          debug:
            msg: "Le conteneur est deja stoppe...Nothing to do"
          when: container_info.container.State.Running == false

      when: container_info.exists

    - name: Remove container
      block:
        - name: Container exist
          docker_container:
            name: "{{ my_host }}"
            image: "{{ my_host }}"
            state: absent
          when: container_info.exists

        - name: Container deleted
          debug:
            msg: "Le conteneur a ete supprime..."

        - name: Container doesn't exist
          debug:
            msg: "Le conteneur n'existe pas...Nothing to do"
          when: not container_info.exists
    
    - name: Construire une nouvelle image Docker
      community.docker.docker_image:
        name: "{{ my_host }}"
        source: build
        build:
          path: /home/kevin/docker_container/{{ my_host }}
        state: present
      no_log: true

    - name: Run un nouveau conteneur Docker
      docker_container:
        name: "{{ my_host }}"
        image: "{{ my_host }}"
        ports:
          - "{{ port }}:80"
          - "5432:5432"
        hostname: "{{ my_host }}"
        state: started
      no_log: true
