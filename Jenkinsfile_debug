pipeline {
    agent any

    stages {
        stage('Initial checkout') {
            steps {
                checkout scm
            }
        }
        stage('Clear existing devops cloned repo') {
            steps {
                script {
                    def result = sh(script: 'rm -rf /home/kevin/git/devops', returnStatus: true)

                    if (result == 0) {
                        echo "Le répertoire a été supprimé avec succès."
                    } else {
                        echo "La suppression du répertoire a échoué."
                        }
                    }
                }
            }
        stage('Get Dockerfile') {
            steps {
                script {
                    // Clonez le répertoire
                    sh 'cd /home/kevin/git && git clone git@github.com:tkvy4/devops.git'
            
                    // Charger les variables depuis autre_variables.groovy dans le même répertoire
                    def loadedVariables = load 'variables.groovy'

                    // Définir la variable d'environnement pour une utilisation dans tous les blocs stage
                    DOCKER_IMAGE = loadedVariables.DOCKER_IMAGE

                    echo "Path : /home/kevin/docker_container/${loadedVariables.DOCKER_IMAGE}"
                    def path = "/home/kevin/docker_container/${loadedVariables.DOCKER_IMAGE}"
                    echo "${path}"

                    // Pré build et run checks
                    // Est ce que le répertoire existe ?
                    def directoryExists = sh(script: '[ -d ${path} ] && echo "true" || echo "false"', returnStdout: true).trim()

                    if (directoryExists == "true") {
                        echo "Le répertoire existe déjà. Continuer le build..."
                        sh "cd ${path}"
                    } else {
                        echo "Le répertoire n'existe pas. Création..."
                        sh "mkdir ${path} && cd ${path}"
                        echo "Répertoire crée."
                    }

                    // Copiez le Dockerfile
                    sh "cp /home/kevin/git/devops/Dockerfile ${path}"
                    sh 'docker build -t ${loadedVariables.DOCKER_IMAGE} .'
                    sh 'docker run -d -p 8080:80 ${loadedVariables.DOCKER_IMAGE}'
                    }
                }
            }
        }
}
